#!/usr/bin/env node
'use strict';Object.defineProperty(exports,'__esModule',{value:!0});var _slicedToArray=function(){function sliceIterator(arr,i){var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _s,_i=arr[Symbol.iterator]();!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!(i&&_arr.length===i));_n=!0);}catch(err){_d=!0,_e=err}finally{try{!_n&&_i['return']&&_i['return']()}finally{if(_d)throw _e}}return _arr}return function(arr,i){if(Array.isArray(arr))return arr;if(Symbol.iterator in Object(arr))return sliceIterator(arr,i);throw new TypeError('Invalid attempt to destructure non-iterable instance')}}();var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1,descriptor.configurable=!0,'value'in descriptor&&(descriptor.writable=!0),Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){return protoProps&&defineProperties(Constructor.prototype,protoProps),staticProps&&defineProperties(Constructor,staticProps),Constructor}}();var _momentTimezone=require('moment-timezone'),_momentTimezone2=_interopRequireDefault(_momentTimezone),_utils=require('./utils');function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor))throw new TypeError('Cannot call a class as a function')}var TimezoneCompare=function(){function TimezoneCompare(a,b){_classCallCheck(this,TimezoneCompare);var c=(0,_utils.getValidZoneName)(a),d=(0,_utils.getValidZoneName)(b);this.from_timezone=c,this.to_timezone=d}return _createClass(TimezoneCompare,[{key:'_getMoments',value:function _getMoments(){var a=this.from_timezone,b=this.to_timezone,c=[],d=_momentTimezone2.default.tz(a).startOf('day'),e=d.clone().add(_utils.NUM_HOURS,'hours');for(d.add(-30,'minutes');d.isBefore(e);){var f=d.add(30,'minutes').clone(),g=f.clone().tz(b);c.push([f,g])}return c}},{key:'getTimesAsStrings',value:function getTimesAsStrings(){var a=this.from_timezone,b=this.to_timezone,c=this._getMoments().map(function(_ref){var _ref2=_slicedToArray(_ref,2),d=_ref2[0],e=_ref2[1];return[d.format(_utils.FORMAT)+' '+a,e.format(_utils.FORMAT)+' '+b]});return{times:c,timezones:[a,b]}}},{key:'getTimesAsMoments',value:function getTimesAsMoments(){var a=this.from_timezone,b=this.to_timezone,c=this._getMoments();return{times:c,timezones:[a,b]}}}]),TimezoneCompare}();exports.default=TimezoneCompare;module.exports=exports['default'];